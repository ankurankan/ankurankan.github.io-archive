<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Plotting | My Octopress Blog]]></title>
  <link href="http://ankurankan.github.io/blog/categories/plotting/atom.xml" rel="self"/>
  <link href="http://ankurankan.github.io/"/>
  <updated>2013-10-12T00:12:38+05:30</updated>
  <id>http://ankurankan.github.io/</id>
  <author>
    <name><![CDATA[Ankur Ankan]]></name>
    <email><![CDATA[ankurankan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Plotting and Animating NetworkX graphs]]></title>
    <link href="http://ankurankan.github.io/blog/2013/10/11/plotting-and-animating-networkx-graphs/"/>
    <updated>2013-10-11T23:04:00+05:30</updated>
    <id>http://ankurankan.github.io/blog/2013/10/11/plotting-and-animating-networkx-graphs</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s start with a very simple color changing animation in which we will draw a graph whose nodes will change color. Here in each iteration we are drawing a new graph over the previous ones with different node colors. This is a very bad approach but let&rsquo;s just start with this. I will write about better ways to do it in the next post.</p>

<p>I will be using <code>networkX</code> for drawing the graphs and <code>matplotlib</code> for animation.
```python
import networkx as nx
import matplotlib.animation as animation
import matplotlib.pyplot as plt
import random</p>

<h1>Graph initialization</h1>

<p>G = nx.Graph()
G.add_nodes_from([1, 2, 3, 4, 5, 6, 7, 8, 9])
G.add_edges_from([(1,2), (3,4), (2,5), (4,5), (6,7), (8,9), (4,7), (1,7), (3,5), (2,7), (5,8), (2,9), (5,7)])</p>

<h1>Animation funciton</h1>

<p>define animate(i):</p>

<pre><code>colors = ['r', 'b', 'g', 'y', 'w', 'm']
nx.draw_circular(G, node_color=[random.choice(colors) for j in range(9)]
</code></pre>

<p>nx.draw_circular(G)
fig = plt.gcf()</p>

<h1>Animator call</h1>

<p>anim = animation.FuncAnimation(fig, animate, frames=20, interval=20, blit=True)
```</p>

<p>Let&rsquo;s step through and see what&rsquo;s happening. In the first four lines we are importing <code>networkX</code>, <code>matplotlib.animation</code>, <code>matplotlib.pyplot</code> and <code>random</code> modules.</p>

<p>In the next few lines we create a graph using networkX:
<code>python
G = nx.Graph()                                                             
G.add_nodes_from([1, 2, 3, 4, 5, 6, 7, 8, 9])
G.add_edges_from([(1,2), (3,4), (2,5), (4,5), (6,7), (8,9), (4,7), (1,7), (3,5), (2,7), (5,8), (2,9), (5,7)])
</code>
First we initialize an empty graph <code>G</code>. Then we add 9 nodes and 13 edges to it.</p>

<p>This next piece is the animation function which takes a single parameter <code>i</code> which is the frame number of the animation.
```python
define animate(i):</p>

<pre><code>colors = ['r', 'b', 'g', 'y', 'w', 'm']                                
nx.draw_circular(G, node_color=[random.choice(colors) for j in range(9)]   
</code></pre>

<p><code>``
Here the</code>colors<code>list is a list of colors from which we will be randomly picking up colors for our nodes.
</code>nx.draw_circular` draws the graph keeping the nodes in a circular pattern.</p>

<p><code>python
anim = animation.FuncAnimation(fig, animate, frames=20, interval=20, blit=True)
</code>
<code>animation.FuncAnimation</code> repeatedly calls the animate fucntion incrementing i in each iteration.
frames define the number of time animate function is called, intervar is the inverval between each call.
<code>blit=True</code> defines to draw only those parts which have changed.</p>
]]></content>
  </entry>
  
</feed>
